#!/usr/bin/env ruby
require 'rubygems'
require 'optparse'
require 'optparse/time'
require 'ostruct'
require 'pp'

require File.dirname(__FILE__) + '/../lib/vuzitruby'

# GENERAL METHODS

# Prints an error message
def error(message)
  puts ''
  puts message
end

# Loads the global parameters
def global_parameters_load(args)
  options = OpenStruct.new
  options.key = nil
  options.id = nil

  opts = OptionParser.new do |opts|
    opts.on("-k", "--keys=PUB_KEY,PRIV_KEY", 
            "Developer API keys - REQUIRED") do |value|
      options.key = value
    end
    
    opts.on("-u", "--service-url=URL", "Sets the service URL") do |value|
      options.service_url = value
    end
  end

  begin
    opts.parse!(args)
  rescue OptionParser::InvalidOption => e
    e.recover(args)
  end

  if options.key == nil
    error("Must provide the --keys parameters")
    return false
  end

  keys = options.key.split(',')

  Vuzit::Service.public_key = keys[0]
  Vuzit::Service.private_key = keys[1]
  Vuzit::Service.user_agent = "VuzitCL Ruby 1.2.1"

  if options.service_url != nil
    Vuzit::Service.service_url = options.service_url
  end

  return true
end

# COMMAND FUNCTIONS

# Performs the delete command.  
def delete_command(args)
  id = args.pop
  
  return if !global_parameters_load(args)

  begin
    doc = Vuzit::Document.destroy(id)
    puts "DELETED: #{id}"
  rescue Vuzit::ClientException => ex
    error "Error occurred: #{ex.code}, #{ex.message}" 
  end
end

# Handles the help command
def help_command(args)
  command = args.pop

  case command
  when "load"
    print_usage_load
  when "delete"
    print_usage_delete
  when "page"
    print_usage_page
  when "event"
    print_usage_event
  when "upload"
    print_usage_upload
  when "search"
    print_usage_search
  else
    error("Unknown option: [#{command}]")
  end
end

# Performs the load command.  
def load_command(args)
  id = args.pop
  
  return if !global_parameters_load(args)

  begin
    doc = Vuzit::Document.find(id)
    puts "LOADED: #{doc.id}"
    puts "title: #{doc.title}"
    puts "subject: #{doc.subject}"
    puts "pages: #{doc.page_count}"
    puts "width: #{doc.page_width}"
    puts "height: #{doc.page_height}"
    puts "size: #{doc.file_size}"
    puts "status: #{doc.status}"
    puts "Download URL: #{Vuzit::Document.download_url(id, 'pdf')}"
  rescue Vuzit::ClientException => ex
    puts "Error occurred: #{ex.code}, #{ex.message}" 
  end
end

# Performs the event command.  
def event_command(args)
  return if !global_parameters_load(args)

  id = args.pop

  options = Hash.new
  opts = OptionParser.new do |opts|
    opts.on("-e", "--event EVENT", "") do |value|
      options[:event] = value
    end
    
    opts.on("-c", "--custom CUSTOM", "") do |value|
      options[:custom] = value
    end

    opts.on("-l", "--limit LIMIT", "") do |value|
      options[:limit] = value
    end

    opts.on("-o", "--offset OFFSET", "") do |value|
      options[:offset] = value
    end
  end

  begin
    opts.parse!(args)
  rescue OptionParser::InvalidOption => e
    e.recover(args)
  end

  begin
    events = Vuzit::Event.find_all(id, options)

    events.each do |event|
      print "[#{event.requested_at.strftime('%Y-%m-%d %H:%M:%S')}] "

      if event.event == "page_view"
        print "#{event.duration}s - "
      end
      print "#{event.event}"

      if event.page != -1
        print ", p#{event.page}"
      end

      if !event.custom.nil?
        print " (#{event.custom})"
      end

      if !event.referer.nil?
        print " - #{event.referer[8, 7]}"
      end
      print " - #{event.remote_host}"
      puts " - #{event.user_agent[0, 8]}"
    end

    puts ""
    puts "#{events.length} events found"
  rescue Vuzit::ClientException => ex
    puts "Error occurred: #{ex.code}, #{ex.message}" 
  end
end

# Performs the page command.  
def page_command(args)
  id = args.pop
  return if !global_parameters_load(args)

  options = Hash.new
  opts = OptionParser.new do |opts|
    opts.on("-i", "--included [PAGES]", "") do |value|
      options[:included_pages] = value
    end
    
    opts.on("-l", "--limit [LIMIT]", "") do |value|
      options[:limit] = value
    end

    opts.on("-o", "--offset [OFFSET]", "") do |value|
      options[:offset] = value
    end
  end

  begin
    opts.parse!(args)
  rescue OptionParser::InvalidOption => e
    e.recover(args)
  end

  begin
    pages = Vuzit::Page.find_all(id, options)

    pages.each do |page|
      puts "Page: #{page.number}"
      puts "#{page.text}"
      puts ''
    end

    puts ""
    puts "#{pages.length} pages found"
  rescue Vuzit::ClientException => ex
    puts "Error occurred: #{ex.code}, #{ex.message}" 
  end
end

# Performs the search command.  
def search_command(args)
  return if !global_parameters_load(args)

  options = Hash.new
  opts = OptionParser.new do |opts|
    opts.on("-q", "--query [QUERY]", "") do |value|
      options[:query] = value
    end
    
    opts.on("-l", "--limit [LIMIT]", "") do |value|
      options[:limit] = value
    end

    opts.on("-o", "--offset [OFFSET]", "") do |value|
      options[:offset] = value
    end
  end

  begin
    opts.parse!(args)
  rescue OptionParser::InvalidOption => e
    e.recover(args)
  end

  begin
    docs = Vuzit::Document.find_all(options)

    docs.each do |doc|
      puts "LOADED: #{doc.id}"
      puts "title: #{doc.title}"
      puts "subject: #{doc.subject}"
      puts "pages: #{doc.page_count}"
      puts "width: #{doc.page_width}"
      puts "height: #{doc.page_height}"
      puts "size: #{doc.file_size}"
      puts "status: #{doc.status}"
      puts "excerpt: #{doc.excerpt}"
      puts ''
    end

    puts ""
    puts "#{docs.length} documents found"
  rescue Vuzit::ClientException => ex
    puts "Error occurred: #{ex.code}, #{ex.message}" 
  end
end

# Performs the load command.  
def upload_command(args)
  path = args.pop
  
  return if !global_parameters_load(args)

  list = Hash.new
  opts = OptionParser.new do |opts|
    opts.on("-s", "--secure", "") do
      list[:secure] = true
    end
    
    opts.on("-p", "--download-pdf", "") do
      list[:download_pdf] = true
    end

    opts.on("-d", "--download-document", "") do
      list[:download_document] = true
    end
  end

  begin
    opts.parse!(args)
  rescue OptionParser::InvalidOption => e
    e.recover(args)
  end

  begin
    doc = Vuzit::Document.upload(path, list)
    puts "UPLOADED: #{doc.id}"
  rescue Vuzit::ClientException => ex
    error "Error occurred: #{ex.code}, #{ex.message}" 
  end
end 

# PRINT USAGE METHODS

# Prints the delete usage.  
def print_usage_delete
  puts "delete: Delete a document"
  puts "usage: delete [OPTIONS] WEB_ID"
  puts ""
  puts "Valid options:"
  puts "  none"
  puts ""
  print_usage_global
end

# Prints the general usage
def print_usage_general
  puts "VuzitCL - Vuzit Command Line"
  puts "Usage: vuzitcl COMMAND -k PUBLIC_KEY,PRIVATE_KEY [OPTIONS]"
  puts ""
  puts "Type 'vuzitcl help <command>' for help on a specific command."
  puts ""
  puts "Available commands:"
  puts ""
  puts "  delete"
  puts "  event"
  puts "  load"
  puts "  page"
  puts "  upload"
  puts "  search"
  puts "  help"
end

# Prints the event options
def print_usage_event
  puts "page: Loads document event analytics."
  puts "usage: event [OPTIONS] WEB_ID"
  puts ""
  puts "Valid options:"
  puts "  -e, --event                    Event type to load"
  puts "  -c, --custom                   Custom value to load"
  puts "  -l, --limit                    Limits the number of results"
  puts "  -o, --offset                   Offset the results at this number"
  puts ""
  print_usage_global
end

# Prints the global options
def print_usage_global
  puts "Global Options:"
  puts "  -k, --keys=PUB_KEY,PRIV_KEY    Developer API keys - REQUIRED"
  puts "  -u, --service-url=URL          Sets the service URL (e.g. http://domain.com)"
end

# Prints the load options
def print_usage_load
  puts "load: Loads a document"
  puts "usage: load [OPTIONS] WEB_ID"
  puts ""
  puts "Valid options:"
  puts "  none"
  puts ""
  print_usage_global
end

# Prints the search options
def print_usage_page
  puts "page: Loads page text for a document."
  puts "usage: page [OPTIONS] WEB_ID"
  puts ""
  puts "Valid options:"
  puts "  -i, --included                 Set range of pages to load (e.g '5,10-19')"
  puts "  -l, --limit                    Limits the results to a number"
  puts "  -o, --offset                   Offsets the results at this number"
  puts ""
  print_usage_global
end

# Prints the search options
def print_usage_search
  puts "search: Searches for documents within Vuzit."
  puts "usage: search [OPTIONS]"
  puts ""
  puts "Valid options:"
  puts "  -q, --query                    Query keywords"
  puts "  -l, --limit                    Limits the results to a number"
  puts "  -o, --offset                   Offsets the results at this number"
  puts ""
  print_usage_global
end

# Prints the upload options
def print_usage_upload
  puts "upload: Upload a document to Vuzit."
  puts "usage: upload [OPTIONS] PATH"
  puts ""
  puts "Valid options:"
  puts "  -s, --secure                   Make the document secure (not public)"
  puts "  -p, --download-pdf             Make the PDF downloadable"
  puts "  -d, --download-document        Make the original document downloadable"
  puts ""
  print_usage_global
end

# MAIN CODE EXECUTION

command = ARGV.shift

case command
  when "load"
    load_command(ARGV)
  when "delete"
    delete_command(ARGV)
  when "event"
    event_command(ARGV)
  when "page"
    page_command(ARGV)
  when "search"
    search_command(ARGV)
  when "upload"
    upload_command(ARGV)
  when "help"
    help_command(ARGV)
  else
    error("Unknown command: [#{command}]")
    print_usage_general 
end

